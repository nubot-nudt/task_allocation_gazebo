#!/usr/bin/env python
PACKAGE = "nubot_allocation"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#gen.add("Use_CMAC", bool_t, 0, "enable cmac controller", False)

gen.add("kp", double_t, 0, "kP gain for feedback controller", 1.5, 0, 20)
gen.add("kalpha", double_t, 0, "kalpha gain for feedback controller", 3.15, -10, 10)
gen.add("kbeta", double_t, 0, "kbeta gain for feedback controller", -0.075, -20, 0)

#gen.add("Kx_f", double_t, 0, "FeedForward gain for Vx in forward direction", 0.2, 0, 1)
#gen.add("Kx_b", double_t, 0, "FeedForward gain for Vx in backward direction", 0.5, 0, 1)
#gen.add("Target_Position", double_t, 0, "Target_Position for feedback controller", 0.7, 0, 1)

#gen.add("int_param", int_t, 0, "An Integer parameter", 50, 0, 100)
#gen.add("double_param", double_t, 0, "A double parameter", .5, 0, 1)
#gen.add("str_param", str_t, 0, "A string parameter", "Hello World")
#gen.add("bool_param", bool_t, 0, "A Boolean parameter", True)

#size_enum = gen.enum([ gen.const("Small", int_t, 0, "A small constant"),
#                  gen.const("Medium", int_t, 1, "A medium constant"),
#                  gen.const("Large", int_t, 2, "A large constant"),
#                  gen.const("ExtraLarge", int_t, 3, "An extra large constant") ],
#                  "An enum to set size")

#gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "nubot_allocation", "nubotallocation"))
